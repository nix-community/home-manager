{
  config,
  lib,
  pkgs,
  ...
}:

let

  cfg = config.systemd.user.tmpfiles;

in
{
  meta.maintainers = [ lib.maintainers.dawidsowa ];

  options.systemd.user.tmpfiles = {
    rules = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [ ];
      example = [ "L /home/user/Documents - - - - /mnt/data/Documents" ];
      description = ''
        Rules for creating and cleaning up temporary files automatically.

        See {manpage}`tmpfiles.d(5)` for the format of the rules.
      '';
    };
    rulesToPurgeOnChange = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [ ];
      example = [ "L+$ /home/user/Documents - - - - /mnt/data/Documents" ];
      description = ''
        Rules for creating and cleaning up temporary files automatically. In
        contrast to {option}`systemd.user.tmpfiles.rules`, the target files are
        purged when these rules change.

        See {manpage}`systemd-tmpfiles(8)` for details about purging.
        See {manpage}`tmpfiles.d(5)` for the format of the rules.
      '';
    };
  };

  config =
    let
      mkConfigFileFor =
        option:
        lib.mkIf (cfg.${option} != [ ]) {
          text = ''
            # This file is generated by Home Manager and should not be modified.
            # Please change the option ‘systemd.user.tmpfiles.${option}’ instead.
            ${lib.concatStringsSep "\n" cfg.${option}}
          '';
          onChange = ''
            run ${pkgs.systemd}/bin/systemd-tmpfiles --user --remove --create ''${DRY_RUN:+--dry-run}
          '';
        };

      # WARNING: When changing this path, the next home-manager generation will
      # not find and purge the rules of the current generation. Accordingly, add
      # a compatibility layer.
      rulesToPurgePath = "user-tmpfiles.d/home-manager-purged.conf";
    in
    lib.mkMerge [

      (lib.mkIf pkgs.stdenv.hostPlatform.isLinux {
        # The activation script must be enabled unconditionally in order to
        # guarantee that the old rules are purged even if the new set of rules
        # is empty, i.e. `cfg.rulesToPurgeOnChange == [ ]`.
        home.activation.purgeTmpfiles = lib.hm.dag.entryAfter [ "writeBoundary" ] (
          let
            path = lib.strings.removePrefix "${config.home.homeDirectory}/" config.xdg.configHome;
          in
          ''
            if [[ -v oldGenPath && -f $oldGenPath/home-files/${path} ]] &&
                diff -q $oldGenPath/home-files/${path} $newGenPath/home-files/${path} &>/dev/null; then
              verboseEcho "Purge old tmpfiles"
              run ${pkgs.systemd}/bin/systemd-tmpfiles --user --purge ''${DRY_RUN:+--dry-run} $oldGenPath/home-files/${path}
            fi
          ''
        );
      })

      (lib.mkIf (cfg.rules != [ ] || cfg.rulesToPurgeOnChange != [ ]) {
        assertions = [
          (lib.hm.assertions.assertPlatform "systemd.user.tmpfiles" pkgs lib.platforms.linux)
        ];

        warnings =
          let
            notMarkedForPurging = rule: builtins.match "[fFdDvqQpLcbCwe][+!-=~^]*\\$.*" rule == null;
            mkWarning = rule: ''
              'systemd.user.tmpfiles.rulesToPurgeOnChange' contains the rule
                ${rule}
              despite it not being marked for purging. Did you mean to add it to
              'systemd.user.tmpfiles.rules' instead?
            '';
          in
          map mkWarning (lib.filter notMarkedForPurging cfg.rulesToPurgeOnChange);

        xdg.configFile = {
          "user-tmpfiles.d/home-manager.conf" = mkConfigFileFor "rules";
          ${rulesToPurgePath} = mkConfigFileFor "rulesToPurgeOnChange";
          "systemd/user/basic.target.wants/systemd-tmpfiles-setup.service".source =
            "${pkgs.systemd}/example/systemd/user/systemd-tmpfiles-setup.service";
          "systemd/user/systemd-tmpfiles-setup.service".source =
            "${pkgs.systemd}/example/systemd/user/systemd-tmpfiles-setup.service";
          "systemd/user/timers.target.wants/systemd-tmpfiles-clean.timer".source =
            "${pkgs.systemd}/example/systemd/user/systemd-tmpfiles-clean.timer";
          "systemd/user/systemd-tmpfiles-clean.service".source =
            "${pkgs.systemd}/example/systemd/user/systemd-tmpfiles-clean.service";
        };
      })

    ];
}
