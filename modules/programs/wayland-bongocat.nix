{
  config,
  lib,
  pkgs,
  ...
}:
let
  inherit (lib)
    mkIf
    mkOption
    types
    ;
  cfg = config.programs.wayland-bongocat;
  boolToInt = value: if value then 1 else 0;
in
{
  meta.maintainers = [ lib.maintainers.bbigras ];
  options.programs.wayland-bongocat = {
    enable = lib.mkEnableOption "the wayland bongocat overlay";
    package = lib.mkPackageOption pkgs "wayland-bongocat" { nullable = true; };

    cat = {
      height = mkOption {
        default = 50;
        example = 25;
        type = types.ints.unsigned;
        description = "Size of bongo cat (16-128).";
      };
      xOffset = mkOption {
        default = 0;
        example = 25;
        type = types.ints.unsigned;
        description = "Horizontal position offset.";
      };
      yOffset = mkOption {
        default = 0;
        example = 25;
        type = types.ints.unsigned;
        description = "Vertical position offset.";
      };
    };
    keyboardDevices = mkOption {
      default = [ "/dev/input/event4" ];
      example = [ "/dev/input/event1" ];
      type = types.listOf types.path;
      description = "Input device paths.";
    };
    fps = mkOption {
      default = 60;
      example = 60;
      type = types.ints.unsigned;
      description = "Animation frame rate (1-120).";
    };
    overlayOpacity = mkOption {
      default = 150;
      example = 0;
      type = types.ints.unsigned;
      description = "Background opacity (0-255, 0=transparent).";
    };
    overlayPosition = mkOption {
      default = "top";
      example = "bottom";
      type = types.enum [
        "bottom"
        "top"
      ];
      description = "Position of overlay on screen";
    };
    debug = mkOption {
      type = types.bool;
      default = false;
      description = "Enable debug logging";
    };
    monitor = mkOption {
      default = null;
      example = "eDP-1";
      type = types.str;
      description = ''
        Monitor to display on (e.g., "eDP-1", "HDMI-A-1")
        Default (null) = Auto-detect
      '';
    };
  };
  config =
    let
      configDir =
        if (pkgs.stdenv.targetPlatform.isDarwin) then
          "Library/Application Support/wayland-bongocat"
        else
          "${config.xdg.configHome}/wayland-bongocat";
      configFile = "${configDir}/settings.conf";

      settings = {
        main = {
          cat_height = cfg.cat.height;
          cat_x_offset = cfg.cat.xOffset;
          cat_y_offset = cfg.cat.yOffset;
          enable_debug = boolToInt cfg.debug;
          fps = cfg.fps;
          overlay_opacity = cfg.overlayOpacity;
        };
      };
    in
    mkIf cfg.enable {
      home = {
        packages = mkIf (cfg.package != null) [ cfg.package ];

        file.wayland-bongocat-settings = {
          enable = settings != { };
          target = configFile;
          text =
            let
              toIni = lib.generators.toINI { };
            in
            lib.mkMerge (
              [
                "# Generated by Home Manager."
                (toIni settings)
              ]
              ++ (builtins.map (item: "keyboard_device=${item}") cfg.keyboardDevices)
            );

        };
      };
      systemd.user.services = {
        bongocat = {
          Unit = {
            After = [ "graphical-session.target" ];
            PartOf = [ "graphical-session.target" ];
          };
          Install = {
            WantedBy = [ "graphical-session.target" ];
          };
          Service = {
            Restart = "on-failure";
            PrivateTmp = true;
            ProtectSystem = "full";
            Type = "exec";
            Slice = "session.slice"; # ?
            ExecStart = "${pkgs.wayland-bongocat}/bin/bongocat --config ${configFile}";
          };
        };
      };
    };
}
